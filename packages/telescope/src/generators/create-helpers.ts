import { join, dirname } from "path";
import { mkdirp } from "mkdirp";
import { TelescopeBuilder } from "../builder";
import pkg from "../../package.json";
import { writeContentToFile } from "../utils/files";
import {
  external,
  externalComet,
  externalIcJs,
  getHelper,
  getHelperForBigint,
  getReactQueryHelper,
  getVueQueryHelper,
  mobx,
  grpcGateway,
  grpcWeb,
  pinia,
  varint,
  utf8,
  getHelperForBinary,
  getRegistryHelper,
  getTypesHelper,
  jsonSafe,
  decimal,
  getHelperFuncTypes,
  getReactQueryHelperHooks,
  getReactQueryHelperHooksIcJs,
} from "../helpers";

const version = process.env.NODE_ENV === "test" ? "latest" : pkg.version;
const header = `/**
* This file and any referenced files were automatically generated by ${pkg.name}@${version}
* DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain
* and run the transpile command or npm scripts command that is used to regenerate this bundle.
*/
\n`;

const write = (
  builder: TelescopeBuilder,
  indexFile: string,
  content: string
) => {
  const indexOutFile = join(builder.outPath, indexFile);
  mkdirp.sync(dirname(indexOutFile));
  writeContentToFile(
    builder.outPath,
    builder.options,
    header + content,
    indexOutFile
  );
};

export const plugin = (builder: TelescopeBuilder) => {
  write(
    builder,
    "helpers.ts",
    builder.options.prototypes.typingsFormat.num64 === "bigint"
      ? getHelperForBigint(builder.options)
      : getHelper(builder.options)
  );

  // should be exported
  if (
    builder.options.stargateClients.addGetTxRpc ||
    builder.options.includeExternalHelpers ||
    builder.options.reactQuery?.enabled ||
    builder.options.vueQuery?.enabled ||
    builder.options?.helperFuncCreators?.enabled
  ) {
    // also react-query needs these...
    builder.files.push("extern.ts");

    if (builder.options?.helperFuncCreators?.enabled) {
      write(builder, "extern.ts", externalIcJs);
    } else {
      write(
        builder,
        "extern.ts",
        builder.options.rpcClients?.useConnectComet ? externalComet : external
      );
    }
  }

  if (builder.options.helperFuncCreators?.enabled) {
    builder.files.push("helper-func-types.ts");
    write(builder, "helper-func-types.ts", getHelperFuncTypes(builder.options));
  }

  if (
    builder.options.reactQuery?.enabled ||
    (builder.options?.helperFuncCreators?.enabled &&
      builder.options?.helperFuncCreators?.genCustomHooks)
  ) {
    builder.files.push("react-query.ts");

    if (
      builder.options?.helperFuncCreators?.enabled &&
      builder.options?.helperFuncCreators?.genCustomHooks
    ) {
      if (builder.options?.useInterchainJs) {
        write(
          builder,
          "react-query.ts",
          getReactQueryHelperHooksIcJs(builder.options)
        );
      } else {
        write(
          builder,
          "react-query.ts",
          getReactQueryHelperHooks(builder.options)
        );
      }
    } else {
      write(builder, "react-query.ts", getReactQueryHelper(builder.options));
    }
  }

  if (builder.options.vueQuery?.enabled) {
    builder.files.push("vue-query.ts");
    write(builder, "vue-query.ts", getVueQueryHelper(builder.options));
  }

  if (builder.options.mobx?.enabled) {
    builder.files.push("mobx.ts");
    write(builder, "mobx.ts", mobx);
  }

  if (builder.options.pinia?.enabled) {
    builder.files.push("pinia-endpoint.ts");
    write(builder, "pinia-endpoint.ts", pinia);
  }

  if (builder.options.rpcClients?.type === "grpc-gateway") {
    builder.files.push("grpc-gateway.ts");
    write(builder, "grpc-gateway.ts", grpcGateway);
  }

  if (builder.options.rpcClients?.type === "grpc-web") {
    builder.files.push("grpc-web.ts");
    write(builder, "grpc-web.ts", grpcWeb);
  }

  if (builder.options.prototypes.typingsFormat.customTypes.useEnhancedDecimal) {
    builder.files.push("decimals.ts");
    write(builder, "decimals.ts", decimal);
  }

  if (
    !builder.options.prototypes.typingsFormat.toJsonUnknown &&
    builder.options.prototypes.methods.toJSON
  ) {
    builder.files.push("json-safe.ts");
    write(builder, "json-safe.ts", jsonSafe);
  }

  if (builder.options.prototypes.typingsFormat.num64 === "bigint") {
    builder.files.push("varint.ts");
    write(builder, "varint.ts", varint);

    builder.files.push("utf8.ts");
    write(builder, "utf8.ts", utf8);

    builder.files.push("binary.ts");
    write(builder, "binary.ts", getHelperForBinary(builder.options));
  }

  if (
    builder.options.prototypes?.typingsFormat?.useTelescopeGeneratedType ||
    (builder.options.interfaces?.enabled &&
      builder.options.interfaces?.useGlobalDecoderRegistry)
  ) {
    builder.files.push("types.ts");
    write(builder, "types.ts", getTypesHelper(builder.options));
  }

  if (
    builder.options.interfaces?.enabled &&
    builder.options.interfaces?.useGlobalDecoderRegistry
  ) {
    builder.files.push("registry.ts");
    write(builder, "registry.ts", getRegistryHelper(builder.options));
  }
};
