export declare const external = "import { QueryClient, createProtobufRpcClient, ProtobufRpcClient } from '@cosmjs/stargate'\nimport { Tendermint34Client, HttpEndpoint } from \"@cosmjs/tendermint-rpc\";\nimport { sha256 } from \"@cosmjs/crypto\";\n\nconst _rpcClients: Record<string, ProtobufRpcClient> = {};\n\nexport const getRpcEndpointKey = (rpcEndpoint: string | HttpEndpoint) => {\n    if (typeof rpcEndpoint === 'string') {\n        return rpcEndpoint;\n    } else if (!!rpcEndpoint) {\n        //@ts-ignore\n        return rpcEndpoint.url;\n    }\n}\n\nexport const getRpcClient = async (rpcEndpoint: string | HttpEndpoint) => {\n    const key = getRpcEndpointKey(rpcEndpoint);\n    if (!key) return;\n    if (_rpcClients.hasOwnProperty(key)) {\n        return _rpcClients[key];\n    }\n    const tmClient = await Tendermint34Client.connect(rpcEndpoint);\n    //@ts-ignore\n    const client = new QueryClient(tmClient);\n    const rpc = createProtobufRpcClient(client);\n    _rpcClients[key] = rpc;\n    return rpc;\n}\n\nexport function toHexTextual(data: Uint8Array): string {\n  let out = \"\";\n  for (let i = 0; i < data.length; i++) {\n      out += (\"0\" + data[i].toString(16)).slice(-2);\n\n      if ((i + 1) % 2 === 0 && i !== data.length - 1) {\n          out += \" \";\n      }\n  }\n  return out;\n}\n\nexport function toByteTextual(data: Uint8Array): string {\n  if (data.length <= 35) {\n    return toHexTextual(data);\n  } else {\n    return `SHA-256=${toHexTextual(sha256(data))}`;\n  }\n}\n";
