export declare const externalComet = "import { QueryClient, createProtobufRpcClient, ProtobufRpcClient } from '@cosmjs/stargate'\nimport { connectComet, Tendermint34Client, HttpEndpoint } from \"@cosmjs/tendermint-rpc\";\n\nconst _rpcClients: Record<string, ProtobufRpcClient> = {};\n\nexport const getRpcEndpointKey = (rpcEndpoint: string | HttpEndpoint) => {\n    if (typeof rpcEndpoint === 'string') {\n        return rpcEndpoint;\n    } else if (!!rpcEndpoint) {\n        //@ts-ignore\n        return rpcEndpoint.url;\n    }\n}\n\nexport const getRpcClient = async (rpcEndpoint: string | HttpEndpoint) => {\n    const key = getRpcEndpointKey(rpcEndpoint);\n    if (!key) return;\n    if (_rpcClients.hasOwnProperty(key)) {\n        return _rpcClients[key];\n    }\n    const cometClient = await connectComet(rpcEndpoint);\n    //@ts-ignore\n    const client = new QueryClient(cometClient);\n    const rpc = createProtobufRpcClient(client);\n    _rpcClients[key] = rpc;\n    return rpc;\n}\n\nexport const createRpcClient = async (rpcEndpoint: string | HttpEndpoint) => {\n  const cometClient = await connectComet(rpcEndpoint);\n  //@ts-ignore\n  const client = new QueryClient(cometClient);\n  const rpc = createProtobufRpcClient(client);\n\n  return rpc;\n}\n\nexport const createTm34QueryClient = async (rpcEndpoint: string | HttpEndpoint) => {\n    const tmClient = await Tendermint34Client.connect(rpcEndpoint);\n    //@ts-ignore\n    return new QueryClient(tmClient);\n}\n\nexport const createConnectCometQueryClient = async (rpcEndpoint: string | HttpEndpoint) => {\n    const cometClient = await connectComet(rpcEndpoint);\n    //@ts-ignore\n    return new QueryClient(cometClient);\n}\n";
