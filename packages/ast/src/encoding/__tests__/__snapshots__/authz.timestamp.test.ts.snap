// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cosmos/authz/v1beta1/authz date 1`] = `
"/**
 * Grant gives permissions to execute
 * the provide method with expiration time.
 */
export interface Grant {
  authorization?: Any;

  /**
   * time when the grant will expire and will be pruned. If null, then the grant
   * doesn't have a time expiration (other conditions  in \`authorization\`
   * may apply to invalidate the grant)
   */
  expiration?: Date;
}"
`;

exports[`cosmos/authz/v1beta1/authz date 2`] = `
"export const Grant = {
  encode(message: Grant, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authorization !== undefined) {
      Any.encode(message.authorization, writer.uint32(10).fork()).ldelim();
    }

    if (message.expiration !== undefined) {
      Timestamp.encode(toTimestamp(message.expiration), writer.uint32(18).fork()).ldelim();
    }

    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Grant {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.authorization = Any.decode(reader, reader.uint32());
          break;

        case 2:
          message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromJSON(object: any): Grant {
    return {
      authorization: isSet(object.authorization) ? Any.fromJSON(object.authorization) : undefined,
      expiration: isSet(object.expiration) ? new Date(object.expiration) : undefined
    };
  },

  toJSON(message: Grant): unknown {
    const obj: any = {};
    message.authorization !== undefined && (obj.authorization = message.authorization ? Any.toJSON(message.authorization) : undefined);
    message.expiration !== undefined && (obj.expiration = message.expiration.toISOString());
    return obj;
  },

  fromPartial(object: DeepPartial<Grant>): Grant {
    const message = createBaseGrant();
    message.authorization = object.authorization !== undefined && object.authorization !== null ? Any.fromPartial(object.authorization) : undefined;
    message.expiration = object.expiration ?? undefined;
    return message;
  },

  fromSDK(object: GrantSDKType): Grant {
    return {
      authorization: object.authorization ? Any.fromSDK(object.authorization) : undefined,
      expiration: object.expiration ?? undefined
    };
  },

  fromSDKJSON(object: any): GrantSDKType {
    return {
      authorization: isSet(object.authorization) ? Any.fromSDKJSON(object.authorization) : undefined,
      expiration: isSet(object.expiration) ? new Date(object.expiration) : undefined
    };
  },

  toSDK(message: Grant): GrantSDKType {
    const obj: any = {};
    message.authorization !== undefined && (obj.authorization = message.authorization ? Any.toSDK(message.authorization) : undefined);
    message.expiration !== undefined && (obj.expiration = message.expiration ?? undefined);
    return obj;
  }

};"
`;

exports[`cosmos/authz/v1beta1/authz date 3`] = `
"export interface GrantAminoType extends AminoMsg {
  type: "cosmos-sdk/Grant";
  value: {
    authorization: {
      type_url: string;
      value: Uint8Array;
    };
    expiration: {
      seconds: string;
      nanos: number;
    };
  };
}"
`;

exports[`cosmos/authz/v1beta1/authz date 4`] = `
"export const AminoConverter = {
  "/cosmos.authz.v1beta1.Grant": {
    aminoType: "cosmos-sdk/Grant",
    toAmino: ({
      authorization,
      expiration
    }: Grant): GrantAminoType["value"] => {
      return {
        authorization: {
          type_url: authorization.typeUrl,
          value: authorization.value
        },
        expiration
      };
    },
    fromAmino: ({
      authorization,
      expiration
    }: GrantAminoType["value"]): Grant => {
      return {
        authorization: {
          typeUrl: authorization.type_url,
          value: authorization.value
        },
        expiration
      };
    }
  }
};"
`;

exports[`cosmos/authz/v1beta1/authz timestamp 1`] = `
"/**
 * Grant gives permissions to execute
 * the provide method with expiration time.
 */
export interface Grant {
  authorization?: Any;

  /**
   * time when the grant will expire and will be pruned. If null, then the grant
   * doesn't have a time expiration (other conditions  in \`authorization\`
   * may apply to invalidate the grant)
   */
  expiration?: Timestamp;
}"
`;

exports[`cosmos/authz/v1beta1/authz timestamp 2`] = `
"export const Grant = {
  encode(message: Grant, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authorization !== undefined) {
      Any.encode(message.authorization, writer.uint32(10).fork()).ldelim();
    }

    if (message.expiration !== undefined) {
      Timestamp.encode(message.expiration, writer.uint32(18).fork()).ldelim();
    }

    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Grant {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.authorization = Any.decode(reader, reader.uint32());
          break;

        case 2:
          message.expiration = Timestamp.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromJSON(object: any): Grant {
    return {
      authorization: isSet(object.authorization) ? Any.fromJSON(object.authorization) : undefined,
      expiration: isSet(object.expiration) ? fromJsonTimestamp(object.expiration) : undefined
    };
  },

  toJSON(message: Grant): unknown {
    const obj: any = {};
    message.authorization !== undefined && (obj.authorization = message.authorization ? Any.toJSON(message.authorization) : undefined);
    message.expiration !== undefined && (obj.expiration = fromTimestamp(message.expiration).toISOString());
    return obj;
  },

  fromPartial(object: DeepPartial<Grant>): Grant {
    const message = createBaseGrant();
    message.authorization = object.authorization !== undefined && object.authorization !== null ? Any.fromPartial(object.authorization) : undefined;
    message.expiration = object.expiration !== undefined && object.expiration !== null ? Timestamp.fromPartial(object.expiration) : undefined;
    return message;
  },

  fromSDK(object: GrantSDKType): Grant {
    return {
      authorization: object.authorization ? Any.fromSDK(object.authorization) : undefined,
      expiration: object.expiration ? Timestamp.fromSDK(object.expiration) : undefined
    };
  },

  fromSDKJSON(object: any): GrantSDKType {
    return {
      authorization: isSet(object.authorization) ? Any.fromSDKJSON(object.authorization) : undefined,
      expiration: isSet(object.expiration) ? fromJsonTimestamp(object.expiration) : undefined
    };
  },

  toSDK(message: Grant): GrantSDKType {
    const obj: any = {};
    message.authorization !== undefined && (obj.authorization = message.authorization ? Any.toSDK(message.authorization) : undefined);
    message.expiration !== undefined && (obj.expiration = message.expiration ? Timestamp.toSDK(message.expiration) : undefined);
    return obj;
  }

};"
`;

exports[`cosmos/authz/v1beta1/authz timestamp 3`] = `
"export interface GrantAminoType extends AminoMsg {
  type: "cosmos-sdk/Grant";
  value: {
    authorization: {
      type_url: string;
      value: Uint8Array;
    };
    expiration: {
      seconds: string;
      nanos: number;
    };
  };
}"
`;

exports[`cosmos/authz/v1beta1/authz timestamp 4`] = `
"export const AminoConverter = {
  "/cosmos.authz.v1beta1.Grant": {
    aminoType: "cosmos-sdk/Grant",
    toAmino: ({
      authorization,
      expiration
    }: Grant): GrantAminoType["value"] => {
      return {
        authorization: {
          type_url: authorization.typeUrl,
          value: authorization.value
        },
        expiration
      };
    },
    fromAmino: ({
      authorization,
      expiration
    }: GrantAminoType["value"]): Grant => {
      return {
        authorization: {
          typeUrl: authorization.type_url,
          value: authorization.value
        },
        expiration
      };
    }
  }
};"
`;
