// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GRPC-Gateway Query Client 1`] = `
"export class Query {
  /** Balance queries the balance of a single coin for a single account. */
  static Balance(request: QueryBalanceRequest, initRequest?: fm.InitReq): Promise<QueryBalanceResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/balances/\${request["address"]}/by_denom?\${fm.renderURLSearchParams({ ...request
    }, ["address"])}\`, { ...initRequest,
      method: "GET"
    });
  }

  /** AllBalances queries the balance of all coins for a single account. */
  static AllBalances(request: QueryAllBalancesRequest, initRequest?: fm.InitReq): Promise<QueryAllBalancesResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/balances/\${request["address"]}?\${fm.renderURLSearchParams({ ...request
    }, ["address"])}\`, { ...initRequest,
      method: "GET"
    });
  }

  /**
   * SpendableBalances queries the spenable balance of all coins for a single
   * account.
   */
  static SpendableBalances(request: QuerySpendableBalancesRequest, initRequest?: fm.InitReq): Promise<QuerySpendableBalancesResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/spendable_balances/\${request["address"]}?\${fm.renderURLSearchParams({ ...request
    }, ["address"])}\`, { ...initRequest,
      method: "GET"
    });
  }

  /** TotalSupply queries the total supply of all coins. */
  static TotalSupply(request: QueryTotalSupplyRequest, initRequest?: fm.InitReq): Promise<QueryTotalSupplyResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/supply?\${fm.renderURLSearchParams({ ...request
    }, [])}\`, { ...initRequest,
      method: "GET"
    });
  }

  /** SupplyOf queries the supply of a single coin. */
  static SupplyOf(request: QuerySupplyOfRequest, initRequest?: fm.InitReq): Promise<QuerySupplyOfResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/supply/by_denom?\${fm.renderURLSearchParams({ ...request
    }, [])}\`, { ...initRequest,
      method: "GET"
    });
  }

  /** Params queries the parameters of x/bank module. */
  static Params(request: QueryParamsRequest, initRequest?: fm.InitReq): Promise<QueryParamsResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/params?\${fm.renderURLSearchParams({ ...request
    }, [])}\`, { ...initRequest,
      method: "GET"
    });
  }

  /** DenomsMetadata queries the client metadata of a given coin denomination. */
  static DenomMetadata(request: QueryDenomMetadataRequest, initRequest?: fm.InitReq): Promise<QueryDenomMetadataResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/denoms_metadata/\${request["denom"]}?\${fm.renderURLSearchParams({ ...request
    }, ["denom"])}\`, { ...initRequest,
      method: "GET"
    });
  }

  /**
   * DenomsMetadata queries the client metadata for all registered coin
   * denominations.
   */
  static DenomsMetadata(request: QueryDenomsMetadataRequest, initRequest?: fm.InitReq): Promise<QueryDenomsMetadataResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/denoms_metadata?\${fm.renderURLSearchParams({ ...request
    }, [])}\`, { ...initRequest,
      method: "GET"
    });
  }

  /**
   * DenomOwners queries for all account addresses that own a particular token
   * denomination.
   */
  static DenomOwners(request: QueryDenomOwnersRequest, initRequest?: fm.InitReq): Promise<QueryDenomOwnersResponse> {
    return fm.fetchReq(\`/cosmos/bank/v1beta1/denom_owners/\${request["denom"]}?\${fm.renderURLSearchParams({ ...request
    }, ["denom"])}\`, { ...initRequest,
      method: "GET"
    });
  }

}"
`;
