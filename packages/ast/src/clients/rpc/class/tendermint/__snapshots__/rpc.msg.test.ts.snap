// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RPC Msg Client 1`] = `
"/** Msg defines the bank Msg service. */
export interface Msg {
  /** Send defines a method for sending coins from one account to another account. */
  send(request: MsgSend): Promise<MsgSendResponse>;
  /** MultiSend defines a method for sending coins from some accounts to other accounts. */
  multiSend(request: MsgMultiSend): Promise<MsgMultiSendResponse>;
}"
`;

exports[`RPC Msg Client 2`] = `
"export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.send = this.send.bind(this);
    this.multiSend = this.multiSend.bind(this);
  }
  send(request: MsgSend, useInterfaces: boolean = true): Promise<MsgSendResponse> {
    const data = MsgSend.encode(request).finish();
    const promise = this.rpc.request("cosmos.bank.v1beta1.Msg", "Send", data);
    return promise.then(data => MsgSendResponse.decode(new BinaryReader(data), undefined, useInterfaces));
  }
  multiSend(request: MsgMultiSend, useInterfaces: boolean = true): Promise<MsgMultiSendResponse> {
    const data = MsgMultiSend.encode(request).finish();
    const promise = this.rpc.request("cosmos.bank.v1beta1.Msg", "MultiSend", data);
    return promise.then(data => MsgMultiSendResponse.decode(new BinaryReader(data), undefined, useInterfaces));
  }
}"
`;

exports[`RPC Msg Client 3`] = `
"interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}"
`;
