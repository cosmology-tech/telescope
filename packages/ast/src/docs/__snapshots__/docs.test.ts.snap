// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`baseReadme 1`] = `
"
# OsmoJS

<p align="center">
    <img src="https://yourimage.goes/here" width="80"><br />
    amazing library to do great things
</p>


## install

\`\`\`sh
npm install osmojs
\`\`\`
## Table of contents

- [OsmoJS](#osmojs)
    - [Install](#install)
    - [Table of contents](#table-of-contents)
- [Usage](#usage)
    - [RPC Clients](#rpc-clients)
    - [Composing Messages](#composing-messages)
        - osmosis
        - Cosmos, CosmWasm, and IBC
            - [CosmWasm](#cosmwasm-messages)
            - [IBC](#ibc-messages)
            - [Cosmos](#cosmos-messages)
- [Wallets and Signers](#connecting-with-wallets-and-signing-messages)
    - [Stargate Client](#initializing-the-stargate-client)
    - [Creating Signers](#creating-signers)
    - [Broadcasting Messages](#broadcasting-messages)
- [Advanced Usage](#advanced-usage)
- [Developing](#developing)
- [Credits](#credits)

## Usage

### RPC Clients

\`\`\`js
import { osmosis } from 'osmojs';

const { createRPCQueryClient } = osmosis.ClientFactory; 
const client = await createRPCQueryClient({ rpcEndpoint: RPC_ENDPOINT });

// now you can query the cosmos modules
const balance = await client.cosmos.bank.v1beta1
    .allBalances({ address: 'osmo1abcdefghijklmnopqrstuvwxyz' });

// you can also query the osmosis modules
const balances = await client.osmosis.exchange.v1beta1
    .exchangeBalances()
\`\`\`

### gRPC-web Clients

\`\`\`js
import { osmosis } from 'osmojs';

const { createGrpcWebClient } = osmosis.ClientFactory; 
const client = await createGrpcWebClient({ grpcWebEndpoint: RPC_ENDPOINT });

// now you can query the cosmos modules
const balance = await client.cosmos.bank.v1beta1
    .allBalances({ address: 'osmo1abcdefghijklmnopqrstuvwxyz' });

// you can also query the osmosis modules
const balances = await client.osmosis.exchange.v1beta1
    .exchangeBalances()
\`\`\`

### Composing Messages

Import the \`osmosis\` object from \`osmojs\`. 

\`\`\`js
import { osmosis } from 'osmojs';

const {
    createSpotLimitOrder,
    createSpotMarketOrder,
    deposit
} = osmosis.exchange.v1beta1.MessageComposer.withTypeUrl;
\`\`\`

#### Auction Messages

\`\`\`js
const {
    bid
} = osmosis.auction.v1beta1.MessageComposer.withTypeUrl;
\`\`\`

#### CosmWasm Messages

\`\`\`js
import { cosmwasm } from "osmojs";

const {
    clearAdmin,
    executeContract,
    instantiateContract,
    migrateContract,
    storeCode,
    updateAdmin
} = cosmwasm.wasm.v1.MessageComposer.withTypeUrl;
\`\`\`

#### IBC Messages

\`\`\`js
import { ibc } from 'osmojs';

const {
    transfer
} = ibc.applications.transfer.v1.MessageComposer.withTypeUrl
\`\`\`

#### Cosmos Messages

\`\`\`js
import { cosmos } from 'osmojs';

const {
    fundCommunityPool,
    setWithdrawAddress,
    withdrawDelegatorReward,
    withdrawValidatorCommission
} = cosmos.distribution.v1beta1.MessageComposer.fromPartial;

const {
    multiSend,
    send
} = cosmos.bank.v1beta1.MessageComposer.fromPartial;

const {
    beginRedelegate,
    createValidator,
    delegate,
    editValidator,
    undelegate
} = cosmos.staking.v1beta1.MessageComposer.fromPartial;

const {
    deposit,
    submitProposal,
    vote,
    voteWeighted
} = cosmos.gov.v1beta1.MessageComposer.fromPartial;
\`\`\`

## Connecting with Wallets and Signing Messages

‚ö°Ô∏è For web interfaces, we recommend using [cosmos-kit](https://github.com/hyperweb-io/cosmos-kit). Continue below to see how to manually construct signers and clients.

Here are the docs on [creating signers](https://github.com/hyperweb-io/cosmos-kit/tree/main/packages/react#signing-clients) in cosmos-kit that can be used with Keplr and other wallets.

### Initializing the Stargate Client

Use \`getOsmosisSigningClient\` to get your \`SigningStargateClient\`, with the proto/amino messages full-loaded. No need to manually add amino types, just require and initialize the client:

\`\`\`js
import { getOsmosisSigningClient } from 'osmojs';

const stargateClient = await getOsmosisSigningClient({
    rpcEndpoint,
    signer // OfflineSigner
});
\`\`\`
### Creating Signers

To broadcast messages, you can create signers with a variety of options:

* [cosmos-kit](https://github.com/hyperweb-io/cosmos-kit/tree/main/packages/react#signing-clients) (recommended)
* [keplr](https://docs.keplr.app/api/cosmjs.html)
* [cosmjs](https://gist.github.com/webmaster128/8444d42a7eceeda2544c8a59fbd7e1d9)
### Amino Signer

Likely you'll want to use the Amino, so unless you need proto, you should use this one:

\`\`\`js
import { getOfflineSignerAmino as getOfflineSigner } from 'cosmjs-utils';
\`\`\`
### Proto Signer

\`\`\`js
import { getOfflineSignerProto as getOfflineSigner } from 'cosmjs-utils';
\`\`\`

WARNING: NOT RECOMMENDED TO USE PLAIN-TEXT MNEMONICS. Please take care of your security and use best practices such as AES encryption and/or methods from 12factor applications.

\`\`\`js
import { chains } from 'chain-registry';

const mnemonic =
    'unfold client turtle either pilot stock floor glow toward bullet car science';
    const chain = chains.find(({ chain_name }) => chain_name === 'osmosis');
    const signer = await getOfflineSigner({
    mnemonic,
    chain
    });
\`\`\`
### Broadcasting Messages

Now that you have your \`stargateClient\`, you can broadcast messages:

\`\`\`js
const { send } = cosmos.bank.v1beta1.MessageComposer.withTypeUrl;

const msg = send({
    amount: [
    {
        denom: 'uosmo',
        amount: '1000'
    }
    ],
    toAddress: address,
    fromAddress: address
});

const fee: StdFee = {
    amount: [
    {
        denom: 'uosmo',
        amount: '864'
    }
    ],
    gas: '86364' // this may need to be adjusted
};
const response = await stargateClient.signAndBroadcast(address, [msg], fee);
\`\`\`

If you create gRPC-web client instead of RPC client, you can sign it using stargateSigner and broadcast it as following

\`\`\`
const signed_tx = await signClient.sign('address', [msg], fee, 'gRPC-web memo', signerData);
    console.log(signed_tx);
    const txRawBytes = Uint8Array.from(TxRaw.encode(signed_tx).finish());
    // uncomment the following snippet to send transaction
    const res = await client.cosmos.tx.v1beta1.broadcastTx(  
      {
        txBytes: txRawBytes,
        //can be replace with BroadcastMode interface as enum
        mode: 1
      }
    )
    
    console.log(res);
\`\`\`

Link to a working demo: https://github.com/hoangdv2429/grpc-web-js

## Advanced Usage


If you want to manually construct a stargate client

\`\`\`js
import { OfflineSigner, GeneratedType, Registry } from "@cosmjs/proto-signing";
import { AminoTypes, SigningStargateClient } from "@cosmjs/stargate";

import { 
    cosmosAminoConverters,
    cosmosProtoRegistry,
    cosmwasmAminoConverters,
    cosmwasmProtoRegistry,
    ibcProtoRegistry,
    ibcAminoConverters,
    osmosisAminoConverters,
    osmosisProtoRegistry
} from 'osmojs';

const signer: OfflineSigner = /* create your signer (see above)  */
const rpcEndpoint = 'https://rpc.cosmos.directory/osmosis'; // or another URL

const protoRegistry: ReadonlyArray<[string, GeneratedType]> = [
    ...cosmosProtoRegistry,
    ...cosmwasmProtoRegistry,
    ...ibcProtoRegistry,
    ...osmosisProtoRegistry
];

const aminoConverters = {
    ...cosmosAminoConverters,
    ...cosmwasmAminoConverters,
    ...ibcAminoConverters,
    ...osmosisAminoConverters
};

const registry = new Registry(protoRegistry);
const aminoTypes = new AminoTypes(aminoConverters);

const stargateClient = await SigningStargateClient.connectWithSigner(rpcEndpoint, signer, {
    registry,
    aminoTypes
});
\`\`\`

## Developing

When first cloning the repo:

\`\`\`
yarn
yarn build
\`\`\`

### Codegen

Contract schemas live in \`./contracts\`, and protos in \`./proto\`. Look inside of \`scripts/codegen.js\` and configure the settings for bundling your SDK and contracts into \`osmojs\`:

\`\`\`
yarn codegen
\`\`\`

### Publishing

Build the types and then publish:

\`\`\`
yarn build:ts
yarn publish
\`\`\`

## Credits

üõ† Built by Cosmology ‚Äî¬†if you like our tools, please consider delegating to [our validator ‚öõÔ∏è](https://cosmology.zone/validator)

Code built with the help of these related projects:

* [@cosmwasm/ts-codegen](https://github.com/CosmWasm/ts-codegen) for generated CosmWasm contract Typescript classes
* [telescope](https://github.com/hyperweb-io/telescope) a "babel for the Cosmos", Telescope is a TypeScript Transpiler for Cosmos Protobufs.
* [cosmos-kit](https://github.com/hyperweb-io/cosmos-kit) A wallet connector for the Cosmos ‚öõÔ∏è

    "
`;

exports[`documentRpcClients 1`] = `
"/** ModuleAccountBalance */
const request: QueryModuleAccountBalanceRequest;
const result = await osmosis.claim.v1beta1.moduleAccountBalance(request);
/** Params */
const request: QueryParamsRequest;
const result = await osmosis.claim.v1beta1.params(request);
/** ClaimRecord */
const request: QueryClaimRecordRequest;
const result = await osmosis.claim.v1beta1.claimRecord(request);
/** ClaimableForAction */
const request: QueryClaimableForActionRequest;
const result = await osmosis.claim.v1beta1.claimableForAction(request);
/** TotalClaimable */
const request: QueryTotalClaimableRequest;
const result = await osmosis.claim.v1beta1.totalClaimable(request);
/** EpochInfos provide running epochInfos */
const request: QueryEpochsInfoRequest;
const result = await osmosis.epochs.v1beta1.epochInfos(request);
/** CurrentEpoch provide current epoch of specified identifier */
const request: QueryCurrentEpochRequest;
const result = await osmosis.epochs.v1beta1.currentEpoch(request);
/** Pools */
const request: QueryPoolsRequest;
const result = await osmosis.gamm.v1beta1.pools(request);
/** NumPools */
const request: QueryNumPoolsRequest;
const result = await osmosis.gamm.v1beta1.numPools(request);
/** TotalLiquidity */
const request: QueryTotalLiquidityRequest;
const result = await osmosis.gamm.v1beta1.totalLiquidity(request);
/**
 * PoolsWithFilter allows you to query specific pools with requested
 * parameters
 */
const request: QueryPoolsWithFilterRequest;
const result = await osmosis.gamm.v1beta1.poolsWithFilter(request);
/** Per Pool gRPC Endpoints */
const request: QueryPoolRequest;
const result = await osmosis.gamm.v1beta1.pool(request);
/**
 * PoolType returns the type of the pool.
 * Returns "Balancer" as a string literal when the pool is a balancer pool.
 * Errors if the pool is failed to be type caseted.
 */
const request: QueryPoolTypeRequest;
const result = await osmosis.gamm.v1beta1.poolType(request);
/**
 * Simulates joining pool without a swap. Returns the amount of shares you'd
 * get and tokens needed to provide
 */
const request: QueryCalcJoinPoolNoSwapSharesRequest;
const result = await osmosis.gamm.v1beta1.calcJoinPoolNoSwapShares(request);
/** CalcJoinPoolShares */
const request: QueryCalcJoinPoolSharesRequest;
const result = await osmosis.gamm.v1beta1.calcJoinPoolShares(request);
/** CalcExitPoolCoinsFromShares */
const request: QueryCalcExitPoolCoinsFromSharesRequest;
const result = await osmosis.gamm.v1beta1.calcExitPoolCoinsFromShares(request);
/** PoolParams */
const request: QueryPoolParamsRequest;
const result = await osmosis.gamm.v1beta1.poolParams(request);
/** TotalPoolLiquidity */
const request: QueryTotalPoolLiquidityRequest;
const result = await osmosis.gamm.v1beta1.totalPoolLiquidity(request);
/** TotalShares */
const request: QueryTotalSharesRequest;
const result = await osmosis.gamm.v1beta1.totalShares(request);
/**
 * SpotPrice defines a gRPC query handler that returns the spot price given
 * a base denomination and a quote denomination.
 */
const request: QuerySpotPriceRequest;
const result = await osmosis.gamm.v1beta1.spotPrice(request);
/** Estimate the swap. */
const request: QuerySwapExactAmountInRequest;
const result = await osmosis.gamm.v1beta1.estimateSwapExactAmountIn(request);
/** EstimateSwapExactAmountOut */
const request: QuerySwapExactAmountOutRequest;
const result = await osmosis.gamm.v1beta1.estimateSwapExactAmountOut(request);
/**
 * SpotPrice defines a gRPC query handler that returns the spot price given
 * a base denomination and a quote denomination.
 */
const request: QuerySpotPriceRequest;
const result = await osmosis.gamm.v2.spotPrice(request);
/**
 * Params defines a gRPC query method that returns the ibc-rate-limit module's
 * parameters.
 */
const request: QueryParamsRequest;
const result = await osmosis.ibcratelimit.v1beta1.params(request);
/** ModuleToDistributeCoins returns coins that are going to be distributed */
const request: ModuleToDistributeCoinsRequest;
const result = await osmosis.incentives.moduleToDistributeCoins(request);
/** GaugeByID returns gauges by their respective ID */
const request: GaugeByIDRequest;
const result = await osmosis.incentives.gaugeByID(request);
/** Gauges returns both upcoming and active gauges */
const request: GaugesRequest;
const result = await osmosis.incentives.gauges(request);
/** ActiveGauges returns active gauges */
const request: ActiveGaugesRequest;
const result = await osmosis.incentives.activeGauges(request);
/** ActiveGaugesPerDenom returns active gauges by denom */
const request: ActiveGaugesPerDenomRequest;
const result = await osmosis.incentives.activeGaugesPerDenom(request);
/** Returns scheduled gauges that have not yet occured */
const request: UpcomingGaugesRequest;
const result = await osmosis.incentives.upcomingGauges(request);
/**
 * UpcomingGaugesPerDenom returns scheduled gauges that have not yet occured
 * by denom
 */
const request: UpcomingGaugesPerDenomRequest;
const result = await osmosis.incentives.upcomingGaugesPerDenom(request);
/**
 * RewardsEst returns an estimate of the rewards from now until a specified
 * time in the future The querier either provides an address or a set of locks
 * for which they want to find the associated rewards
 */
const request: RewardsEstRequest;
const result = await osmosis.incentives.rewardsEst(request);
/**
 * LockableDurations returns lockable durations that are valid to distribute
 * incentives for
 */
const request: QueryLockableDurationsRequest;
const result = await osmosis.incentives.lockableDurations(request);
/** Return full balance of the module */
const request: ModuleBalanceRequest;
const result = await osmosis.lockup.moduleBalance(request);
/** Return locked balance of the module */
const request: ModuleLockedAmountRequest;
const result = await osmosis.lockup.moduleLockedAmount(request);
/** Returns unlockable coins which are not withdrawn yet */
const request: AccountUnlockableCoinsRequest;
const result = await osmosis.lockup.accountUnlockableCoins(request);
/** Returns unlocking coins */
const request: AccountUnlockingCoinsRequest;
const result = await osmosis.lockup.accountUnlockingCoins(request);
/** Return a locked coins that can't be withdrawn */
const request: AccountLockedCoinsRequest;
const result = await osmosis.lockup.accountLockedCoins(request);
/** Returns locked records of an account with unlock time beyond timestamp */
const request: AccountLockedPastTimeRequest;
const result = await osmosis.lockup.accountLockedPastTime(request);
/**
 * Returns locked records of an account with unlock time beyond timestamp
 * excluding tokens started unlocking
 */
const request: AccountLockedPastTimeNotUnlockingOnlyRequest;
const result = await osmosis.lockup.accountLockedPastTimeNotUnlockingOnly(request);
/** Returns unlocked records with unlock time before timestamp */
const request: AccountUnlockedBeforeTimeRequest;
const result = await osmosis.lockup.accountUnlockedBeforeTime(request);
/** Returns lock records by address, timestamp, denom */
const request: AccountLockedPastTimeDenomRequest;
const result = await osmosis.lockup.accountLockedPastTimeDenom(request);
/** Returns total locked per denom with longer past given time */
const request: LockedDenomRequest;
const result = await osmosis.lockup.lockedDenom(request);
/** Returns lock record by id */
const request: LockedRequest;
const result = await osmosis.lockup.lockedByID(request);
/** Returns synthetic lockups by native lockup id */
const request: SyntheticLockupsByLockupIDRequest;
const result = await osmosis.lockup.syntheticLockupsByLockupID(request);
/** Returns account locked records with longer duration */
const request: AccountLockedLongerDurationRequest;
const result = await osmosis.lockup.accountLockedLongerDuration(request);
/** Returns account locked records with a specific duration */
const request: AccountLockedDurationRequest;
const result = await osmosis.lockup.accountLockedDuration(request);
/**
 * Returns account locked records with longer duration excluding tokens
 * started unlocking
 */
const request: AccountLockedLongerDurationNotUnlockingOnlyRequest;
const result = await osmosis.lockup.accountLockedLongerDurationNotUnlockingOnly(request);
/** Returns account's locked records for a denom with longer duration */
const request: AccountLockedLongerDurationDenomRequest;
const result = await osmosis.lockup.accountLockedLongerDurationDenom(request);
/** Params returns lockup params. */
const request: QueryParamsRequest;
const result = await osmosis.lockup.params(request);
/** Params returns the total set of minting parameters. */
const request: QueryParamsRequest;
const result = await osmosis.mint.v1beta1.params(request);
/** EpochProvisions returns the current minting epoch provisions value. */
const request: QueryEpochProvisionsRequest;
const result = await osmosis.mint.v1beta1.epochProvisions(request);
/** GaugeIds takes the pool id and returns the matching gauge ids and durations */
const request: QueryGaugeIdsRequest;
const result = await osmosis.poolincentives.v1beta1.gaugeIds(request);
/** DistrInfo returns the pool's matching gauge ids and weights. */
const request: QueryDistrInfoRequest;
const result = await osmosis.poolincentives.v1beta1.distrInfo(request);
/** Params returns pool incentives params. */
const request: QueryParamsRequest;
const result = await osmosis.poolincentives.v1beta1.params(request);
/** LockableDurations returns lock durations for pools. */
const request: QueryLockableDurationsRequest;
const result = await osmosis.poolincentives.v1beta1.lockableDurations(request);
/** IncentivizedPools returns currently incentivized pools */
const request: QueryIncentivizedPoolsRequest;
const result = await osmosis.poolincentives.v1beta1.incentivizedPools(request);
/** ExternalIncentiveGauges returns external incentive gauges. */
const request: QueryExternalIncentiveGaugesRequest;
const result = await osmosis.poolincentives.v1beta1.externalIncentiveGauges(request);
/** Params returns the total set of superfluid parameters. */
const request: QueryParamsRequest;
const result = await osmosis.superfluid.params(request);
/**
 * Returns superfluid asset type, whether if it's a native asset or an lp
 * share.
 */
const request: AssetTypeRequest;
const result = await osmosis.superfluid.assetType(request);
/** Returns all registered superfluid assets. */
const request: AllAssetsRequest;
const result = await osmosis.superfluid.allAssets(request);
/** Returns the osmo equivalent multiplier used in the most recent epoch. */
const request: AssetMultiplierRequest;
const result = await osmosis.superfluid.assetMultiplier(request);
/** Returns all superfluid intermediary accounts. */
const request: AllIntermediaryAccountsRequest;
const result = await osmosis.superfluid.allIntermediaryAccounts(request);
/** Returns intermediary account connected to a superfluid staked lock by id */
const request: ConnectedIntermediaryAccountRequest;
const result = await osmosis.superfluid.connectedIntermediaryAccount(request);
/** Returns the amount of delegations of specific denom for all validators */
const request: QueryTotalDelegationByValidatorForDenomRequest;
const result = await osmosis.superfluid.totalDelegationByValidatorForDenom(request);
/**
 * Returns the total amount of osmo superfluidly staked.
 * Response is denominated in uosmo.
 */
const request: TotalSuperfluidDelegationsRequest;
const result = await osmosis.superfluid.totalSuperfluidDelegations(request);
/**
 * Returns the coins superfluid delegated for the delegator, validator, denom
 * triplet
 */
const request: SuperfluidDelegationAmountRequest;
const result = await osmosis.superfluid.superfluidDelegationAmount(request);
/** Returns all the delegated superfluid poistions for a specific delegator. */
const request: SuperfluidDelegationsByDelegatorRequest;
const result = await osmosis.superfluid.superfluidDelegationsByDelegator(request);
/** Returns all the undelegating superfluid poistions for a specific delegator. */
const request: SuperfluidUndelegationsByDelegatorRequest;
const result = await osmosis.superfluid.superfluidUndelegationsByDelegator(request);
/**
 * Returns all the superfluid positions of a specific denom delegated to one
 * validator
 */
const request: SuperfluidDelegationsByValidatorDenomRequest;
const result = await osmosis.superfluid.superfluidDelegationsByValidatorDenom(request);
/**
 * Returns the amount of a specific denom delegated to a specific validator
 * This is labeled an estimate, because the way it calculates the amount can
 * lead rounding errors from the true delegated amount
 */
const request: EstimateSuperfluidDelegatedAmountByValidatorDenomRequest;
const result = await osmosis.superfluid.estimateSuperfluidDelegatedAmountByValidatorDenom(request);
/** Returns the specified delegations for a specific delegator */
const request: QueryTotalDelegationByDelegatorRequest;
const result = await osmosis.superfluid.totalDelegationByDelegator(request);
/** Returns a list of whitelisted pool ids to unpool. */
const request: QueryUnpoolWhitelistRequest;
const result = await osmosis.superfluid.unpoolWhitelist(request);
/**
 * Params defines a gRPC query method that returns the tokenfactory module's
 * parameters.
 */
const request: QueryParamsRequest;
const result = await osmosis.tokenfactory.v1beta1.params(request);
/**
 * DenomAuthorityMetadata defines a gRPC query method for fetching
 * DenomAuthorityMetadata for a particular denom.
 */
const request: QueryDenomAuthorityMetadataRequest;
const result = await osmosis.tokenfactory.v1beta1.denomAuthorityMetadata(request);
/**
 * DenomsFromCreator defines a gRPC query method for fetching all
 * denominations created by a specific admin/creator.
 */
const request: QueryDenomsFromCreatorRequest;
const result = await osmosis.tokenfactory.v1beta1.denomsFromCreator(request);
/** Params */
const request: ParamsRequest;
const result = await osmosis.twap.v1beta1.params(request);
/** ArithmeticTwap */
const request: ArithmeticTwapRequest;
const result = await osmosis.twap.v1beta1.arithmeticTwap(request);
/** ArithmeticTwapToNow */
const request: ArithmeticTwapToNowRequest;
const result = await osmosis.twap.v1beta1.arithmeticTwapToNow(request);
/**
 * FeeTokens returns a list of all the whitelisted fee tokens and their
 * corresponding pools. It does not include the BaseDenom, which has its own
 * query endpoint
 */
const request: QueryFeeTokensRequest;
const result = await osmosis.txfees.v1beta1.feeTokens(request);
/** DenomSpotPrice returns all spot prices by each registered token denom. */
const request: QueryDenomSpotPriceRequest;
const result = await osmosis.txfees.v1beta1.denomSpotPrice(request);
/** Returns the poolID for a specified denom input. */
const request: QueryDenomPoolIdRequest;
const result = await osmosis.txfees.v1beta1.denomPoolId(request);
/** Returns a list of all base denom tokens and their corresponding pools. */
const request: QueryBaseDenomRequest;
const result = await osmosis.txfees.v1beta1.baseDenom(request);"
`;

exports[`documentRpcClientsReadme 1`] = `
"
## Table of Contents

[\`osmosis.claim.v1beta1.moduleAccountBalance()\` RPC](#osmosisclaimv1beta1moduleaccountbalance-rpc)
[\`osmosis.claim.v1beta1.params()\` RPC](#osmosisclaimv1beta1params-rpc)
[\`osmosis.claim.v1beta1.claimRecord()\` RPC](#osmosisclaimv1beta1claimrecord-rpc)
[\`osmosis.claim.v1beta1.claimableForAction()\` RPC](#osmosisclaimv1beta1claimableforaction-rpc)
[\`osmosis.claim.v1beta1.totalClaimable()\` RPC](#osmosisclaimv1beta1totalclaimable-rpc)
[\`osmosis.epochs.v1beta1.epochInfos()\` RPC](#osmosisepochsv1beta1epochinfos-rpc)
[\`osmosis.epochs.v1beta1.currentEpoch()\` RPC](#osmosisepochsv1beta1currentepoch-rpc)
[\`osmosis.gamm.v1beta1.pools()\` RPC](#osmosisgammv1beta1pools-rpc)
[\`osmosis.gamm.v1beta1.numPools()\` RPC](#osmosisgammv1beta1numpools-rpc)
[\`osmosis.gamm.v1beta1.totalLiquidity()\` RPC](#osmosisgammv1beta1totalliquidity-rpc)
[\`osmosis.gamm.v1beta1.poolsWithFilter()\` RPC](#osmosisgammv1beta1poolswithfilter-rpc)
[\`osmosis.gamm.v1beta1.pool()\` RPC](#osmosisgammv1beta1pool-rpc)
[\`osmosis.gamm.v1beta1.poolType()\` RPC](#osmosisgammv1beta1pooltype-rpc)
[\`osmosis.gamm.v1beta1.calcJoinPoolNoSwapShares()\` RPC](#osmosisgammv1beta1calcjoinpoolnoswapshares-rpc)
[\`osmosis.gamm.v1beta1.calcJoinPoolShares()\` RPC](#osmosisgammv1beta1calcjoinpoolshares-rpc)
[\`osmosis.gamm.v1beta1.calcExitPoolCoinsFromShares()\` RPC](#osmosisgammv1beta1calcexitpoolcoinsfromshares-rpc)
[\`osmosis.gamm.v1beta1.poolParams()\` RPC](#osmosisgammv1beta1poolparams-rpc)
[\`osmosis.gamm.v1beta1.totalPoolLiquidity()\` RPC](#osmosisgammv1beta1totalpoolliquidity-rpc)
[\`osmosis.gamm.v1beta1.totalShares()\` RPC](#osmosisgammv1beta1totalshares-rpc)
[\`osmosis.gamm.v1beta1.spotPrice()\` RPC](#osmosisgammv1beta1spotprice-rpc)
[\`osmosis.gamm.v1beta1.estimateSwapExactAmountIn()\` RPC](#osmosisgammv1beta1estimateswapexactamountin-rpc)
[\`osmosis.gamm.v1beta1.estimateSwapExactAmountOut()\` RPC](#osmosisgammv1beta1estimateswapexactamountout-rpc)
[\`osmosis.gamm.v2.spotPrice()\` RPC](#osmosisgammv2spotprice-rpc)
[\`osmosis.ibcratelimit.v1beta1.params()\` RPC](#osmosisibcratelimitv1beta1params-rpc)
[\`osmosis.incentives.moduleToDistributeCoins()\` RPC](#osmosisincentivesmoduletodistributecoins-rpc)
[\`osmosis.incentives.gaugeByID()\` RPC](#osmosisincentivesgaugebyid-rpc)
[\`osmosis.incentives.gauges()\` RPC](#osmosisincentivesgauges-rpc)
[\`osmosis.incentives.activeGauges()\` RPC](#osmosisincentivesactivegauges-rpc)
[\`osmosis.incentives.activeGaugesPerDenom()\` RPC](#osmosisincentivesactivegaugesperdenom-rpc)
[\`osmosis.incentives.upcomingGauges()\` RPC](#osmosisincentivesupcominggauges-rpc)
[\`osmosis.incentives.upcomingGaugesPerDenom()\` RPC](#osmosisincentivesupcominggaugesperdenom-rpc)
[\`osmosis.incentives.rewardsEst()\` RPC](#osmosisincentivesrewardsest-rpc)
[\`osmosis.incentives.lockableDurations()\` RPC](#osmosisincentiveslockabledurations-rpc)
[\`osmosis.lockup.moduleBalance()\` RPC](#osmosislockupmodulebalance-rpc)
[\`osmosis.lockup.moduleLockedAmount()\` RPC](#osmosislockupmodulelockedamount-rpc)
[\`osmosis.lockup.accountUnlockableCoins()\` RPC](#osmosislockupaccountunlockablecoins-rpc)
[\`osmosis.lockup.accountUnlockingCoins()\` RPC](#osmosislockupaccountunlockingcoins-rpc)
[\`osmosis.lockup.accountLockedCoins()\` RPC](#osmosislockupaccountlockedcoins-rpc)
[\`osmosis.lockup.accountLockedPastTime()\` RPC](#osmosislockupaccountlockedpasttime-rpc)
[\`osmosis.lockup.accountLockedPastTimeNotUnlockingOnly()\` RPC](#osmosislockupaccountlockedpasttimenotunlockingonly-rpc)
[\`osmosis.lockup.accountUnlockedBeforeTime()\` RPC](#osmosislockupaccountunlockedbeforetime-rpc)
[\`osmosis.lockup.accountLockedPastTimeDenom()\` RPC](#osmosislockupaccountlockedpasttimedenom-rpc)
[\`osmosis.lockup.lockedDenom()\` RPC](#osmosislockuplockeddenom-rpc)
[\`osmosis.lockup.lockedByID()\` RPC](#osmosislockuplockedbyid-rpc)
[\`osmosis.lockup.syntheticLockupsByLockupID()\` RPC](#osmosislockupsyntheticlockupsbylockupid-rpc)
[\`osmosis.lockup.accountLockedLongerDuration()\` RPC](#osmosislockupaccountlockedlongerduration-rpc)
[\`osmosis.lockup.accountLockedDuration()\` RPC](#osmosislockupaccountlockedduration-rpc)
[\`osmosis.lockup.accountLockedLongerDurationNotUnlockingOnly()\` RPC](#osmosislockupaccountlockedlongerdurationnotunlockingonly-rpc)
[\`osmosis.lockup.accountLockedLongerDurationDenom()\` RPC](#osmosislockupaccountlockedlongerdurationdenom-rpc)
[\`osmosis.lockup.params()\` RPC](#osmosislockupparams-rpc)
[\`osmosis.mint.v1beta1.params()\` RPC](#osmosismintv1beta1params-rpc)
[\`osmosis.mint.v1beta1.epochProvisions()\` RPC](#osmosismintv1beta1epochprovisions-rpc)
[\`osmosis.poolincentives.v1beta1.gaugeIds()\` RPC](#osmosispoolincentivesv1beta1gaugeids-rpc)
[\`osmosis.poolincentives.v1beta1.distrInfo()\` RPC](#osmosispoolincentivesv1beta1distrinfo-rpc)
[\`osmosis.poolincentives.v1beta1.params()\` RPC](#osmosispoolincentivesv1beta1params-rpc)
[\`osmosis.poolincentives.v1beta1.lockableDurations()\` RPC](#osmosispoolincentivesv1beta1lockabledurations-rpc)
[\`osmosis.poolincentives.v1beta1.incentivizedPools()\` RPC](#osmosispoolincentivesv1beta1incentivizedpools-rpc)
[\`osmosis.poolincentives.v1beta1.externalIncentiveGauges()\` RPC](#osmosispoolincentivesv1beta1externalincentivegauges-rpc)
[\`osmosis.superfluid.params()\` RPC](#osmosissuperfluidparams-rpc)
[\`osmosis.superfluid.assetType()\` RPC](#osmosissuperfluidassettype-rpc)
[\`osmosis.superfluid.allAssets()\` RPC](#osmosissuperfluidallassets-rpc)
[\`osmosis.superfluid.assetMultiplier()\` RPC](#osmosissuperfluidassetmultiplier-rpc)
[\`osmosis.superfluid.allIntermediaryAccounts()\` RPC](#osmosissuperfluidallintermediaryaccounts-rpc)
[\`osmosis.superfluid.connectedIntermediaryAccount()\` RPC](#osmosissuperfluidconnectedintermediaryaccount-rpc)
[\`osmosis.superfluid.totalDelegationByValidatorForDenom()\` RPC](#osmosissuperfluidtotaldelegationbyvalidatorfordenom-rpc)
[\`osmosis.superfluid.totalSuperfluidDelegations()\` RPC](#osmosissuperfluidtotalsuperfluiddelegations-rpc)
[\`osmosis.superfluid.superfluidDelegationAmount()\` RPC](#osmosissuperfluidsuperfluiddelegationamount-rpc)
[\`osmosis.superfluid.superfluidDelegationsByDelegator()\` RPC](#osmosissuperfluidsuperfluiddelegationsbydelegator-rpc)
[\`osmosis.superfluid.superfluidUndelegationsByDelegator()\` RPC](#osmosissuperfluidsuperfluidundelegationsbydelegator-rpc)
[\`osmosis.superfluid.superfluidDelegationsByValidatorDenom()\` RPC](#osmosissuperfluidsuperfluiddelegationsbyvalidatordenom-rpc)
[\`osmosis.superfluid.estimateSuperfluidDelegatedAmountByValidatorDenom()\` RPC](#osmosissuperfluidestimatesuperfluiddelegatedamountbyvalidatordenom-rpc)
[\`osmosis.superfluid.totalDelegationByDelegator()\` RPC](#osmosissuperfluidtotaldelegationbydelegator-rpc)
[\`osmosis.superfluid.unpoolWhitelist()\` RPC](#osmosissuperfluidunpoolwhitelist-rpc)
[\`osmosis.tokenfactory.v1beta1.params()\` RPC](#osmosistokenfactoryv1beta1params-rpc)
[\`osmosis.tokenfactory.v1beta1.denomAuthorityMetadata()\` RPC](#osmosistokenfactoryv1beta1denomauthoritymetadata-rpc)
[\`osmosis.tokenfactory.v1beta1.denomsFromCreator()\` RPC](#osmosistokenfactoryv1beta1denomsfromcreator-rpc)
[\`osmosis.twap.v1beta1.params()\` RPC](#osmosistwapv1beta1params-rpc)
[\`osmosis.twap.v1beta1.arithmeticTwap()\` RPC](#osmosistwapv1beta1arithmetictwap-rpc)
[\`osmosis.twap.v1beta1.arithmeticTwapToNow()\` RPC](#osmosistwapv1beta1arithmetictwaptonow-rpc)
[\`osmosis.txfees.v1beta1.feeTokens()\` RPC](#osmosistxfeesv1beta1feetokens-rpc)
[\`osmosis.txfees.v1beta1.denomSpotPrice()\` RPC](#osmosistxfeesv1beta1denomspotprice-rpc)
[\`osmosis.txfees.v1beta1.denomPoolId()\` RPC](#osmosistxfeesv1beta1denompoolid-rpc)
[\`osmosis.txfees.v1beta1.baseDenom()\` RPC](#osmosistxfeesv1beta1basedenom-rpc)

### \`osmosis.claim.v1beta1\` RPC

##### \`osmosis.claim.v1beta1.moduleAccountBalance()\` RPC

ModuleAccountBalance

\`\`\`js
/** ModuleAccountBalance */
const request: QueryModuleAccountBalanceRequest;
const result = await osmosis.claim.v1beta1.moduleAccountBalance(request);
\`\`\`

##### \`osmosis.claim.v1beta1.params()\` RPC

Params

\`\`\`js
/** Params */
const request: QueryParamsRequest;
const result = await osmosis.claim.v1beta1.params(request);
\`\`\`

##### \`osmosis.claim.v1beta1.claimRecord()\` RPC

ClaimRecord

\`\`\`js
/** ClaimRecord */
const request: QueryClaimRecordRequest;
const result = await osmosis.claim.v1beta1.claimRecord(request);
\`\`\`

##### \`osmosis.claim.v1beta1.claimableForAction()\` RPC

ClaimableForAction

\`\`\`js
/** ClaimableForAction */
const request: QueryClaimableForActionRequest;
const result = await osmosis.claim.v1beta1.claimableForAction(request);
\`\`\`

##### \`osmosis.claim.v1beta1.totalClaimable()\` RPC

TotalClaimable

\`\`\`js
/** TotalClaimable */
const request: QueryTotalClaimableRequest;
const result = await osmosis.claim.v1beta1.totalClaimable(request);
\`\`\`

##### \`osmosis.epochs.v1beta1.epochInfos()\` RPC

EpochInfos

\`\`\`js
/** EpochInfos provide running epochInfos */
const request: QueryEpochsInfoRequest;
const result = await osmosis.epochs.v1beta1.epochInfos(request);
\`\`\`

##### \`osmosis.epochs.v1beta1.currentEpoch()\` RPC

CurrentEpoch

\`\`\`js
/** CurrentEpoch provide current epoch of specified identifier */
const request: QueryCurrentEpochRequest;
const result = await osmosis.epochs.v1beta1.currentEpoch(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.pools()\` RPC

Pools

\`\`\`js
/** Pools */
const request: QueryPoolsRequest;
const result = await osmosis.gamm.v1beta1.pools(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.numPools()\` RPC

NumPools

\`\`\`js
/** NumPools */
const request: QueryNumPoolsRequest;
const result = await osmosis.gamm.v1beta1.numPools(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.totalLiquidity()\` RPC

TotalLiquidity

\`\`\`js
/** TotalLiquidity */
const request: QueryTotalLiquidityRequest;
const result = await osmosis.gamm.v1beta1.totalLiquidity(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.poolsWithFilter()\` RPC

PoolsWithFilter

\`\`\`js
/**
 * PoolsWithFilter allows you to query specific pools with requested
 * parameters
 */
const request: QueryPoolsWithFilterRequest;
const result = await osmosis.gamm.v1beta1.poolsWithFilter(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.pool()\` RPC

Pool

\`\`\`js
/** Per Pool gRPC Endpoints */
const request: QueryPoolRequest;
const result = await osmosis.gamm.v1beta1.pool(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.poolType()\` RPC

PoolType

\`\`\`js
/**
 * PoolType returns the type of the pool.
 * Returns "Balancer" as a string literal when the pool is a balancer pool.
 * Errors if the pool is failed to be type caseted.
 */
const request: QueryPoolTypeRequest;
const result = await osmosis.gamm.v1beta1.poolType(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.calcJoinPoolNoSwapShares()\` RPC

CalcJoinPoolNoSwapShares

\`\`\`js
/**
 * Simulates joining pool without a swap. Returns the amount of shares you'd
 * get and tokens needed to provide
 */
const request: QueryCalcJoinPoolNoSwapSharesRequest;
const result = await osmosis.gamm.v1beta1.calcJoinPoolNoSwapShares(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.calcJoinPoolShares()\` RPC

CalcJoinPoolShares

\`\`\`js
/** CalcJoinPoolShares */
const request: QueryCalcJoinPoolSharesRequest;
const result = await osmosis.gamm.v1beta1.calcJoinPoolShares(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.calcExitPoolCoinsFromShares()\` RPC

CalcExitPoolCoinsFromShares

\`\`\`js
/** CalcExitPoolCoinsFromShares */
const request: QueryCalcExitPoolCoinsFromSharesRequest;
const result = await osmosis.gamm.v1beta1.calcExitPoolCoinsFromShares(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.poolParams()\` RPC

PoolParams

\`\`\`js
/** PoolParams */
const request: QueryPoolParamsRequest;
const result = await osmosis.gamm.v1beta1.poolParams(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.totalPoolLiquidity()\` RPC

TotalPoolLiquidity

\`\`\`js
/** TotalPoolLiquidity */
const request: QueryTotalPoolLiquidityRequest;
const result = await osmosis.gamm.v1beta1.totalPoolLiquidity(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.totalShares()\` RPC

TotalShares

\`\`\`js
/** TotalShares */
const request: QueryTotalSharesRequest;
const result = await osmosis.gamm.v1beta1.totalShares(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.spotPrice()\` RPC

SpotPrice

\`\`\`js
/**
 * SpotPrice defines a gRPC query handler that returns the spot price given
 * a base denomination and a quote denomination.
 */
const request: QuerySpotPriceRequest;
const result = await osmosis.gamm.v1beta1.spotPrice(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.estimateSwapExactAmountIn()\` RPC

EstimateSwapExactAmountIn

\`\`\`js
/** Estimate the swap. */
const request: QuerySwapExactAmountInRequest;
const result = await osmosis.gamm.v1beta1.estimateSwapExactAmountIn(request);
\`\`\`

##### \`osmosis.gamm.v1beta1.estimateSwapExactAmountOut()\` RPC

EstimateSwapExactAmountOut

\`\`\`js
/** EstimateSwapExactAmountOut */
const request: QuerySwapExactAmountOutRequest;
const result = await osmosis.gamm.v1beta1.estimateSwapExactAmountOut(request);
\`\`\`

##### \`osmosis.gamm.v2.spotPrice()\` RPC

SpotPrice

\`\`\`js
/**
 * SpotPrice defines a gRPC query handler that returns the spot price given
 * a base denomination and a quote denomination.
 */
const request: QuerySpotPriceRequest;
const result = await osmosis.gamm.v2.spotPrice(request);
\`\`\`

##### \`osmosis.ibcratelimit.v1beta1.params()\` RPC

Params

\`\`\`js
/**
 * Params defines a gRPC query method that returns the ibc-rate-limit module's
 * parameters.
 */
const request: QueryParamsRequest;
const result = await osmosis.ibcratelimit.v1beta1.params(request);
\`\`\`

##### \`osmosis.incentives.moduleToDistributeCoins()\` RPC

ModuleToDistributeCoins

\`\`\`js
/** ModuleToDistributeCoins returns coins that are going to be distributed */
const request: ModuleToDistributeCoinsRequest;
const result = await osmosis.incentives.moduleToDistributeCoins(request);
\`\`\`

##### \`osmosis.incentives.gaugeByID()\` RPC

GaugeByID

\`\`\`js
/** GaugeByID returns gauges by their respective ID */
const request: GaugeByIDRequest;
const result = await osmosis.incentives.gaugeByID(request);
\`\`\`

##### \`osmosis.incentives.gauges()\` RPC

Gauges

\`\`\`js
/** Gauges returns both upcoming and active gauges */
const request: GaugesRequest;
const result = await osmosis.incentives.gauges(request);
\`\`\`

##### \`osmosis.incentives.activeGauges()\` RPC

ActiveGauges

\`\`\`js
/** ActiveGauges returns active gauges */
const request: ActiveGaugesRequest;
const result = await osmosis.incentives.activeGauges(request);
\`\`\`

##### \`osmosis.incentives.activeGaugesPerDenom()\` RPC

ActiveGaugesPerDenom

\`\`\`js
/** ActiveGaugesPerDenom returns active gauges by denom */
const request: ActiveGaugesPerDenomRequest;
const result = await osmosis.incentives.activeGaugesPerDenom(request);
\`\`\`

##### \`osmosis.incentives.upcomingGauges()\` RPC

UpcomingGauges

\`\`\`js
/** Returns scheduled gauges that have not yet occured */
const request: UpcomingGaugesRequest;
const result = await osmosis.incentives.upcomingGauges(request);
\`\`\`

##### \`osmosis.incentives.upcomingGaugesPerDenom()\` RPC

UpcomingGaugesPerDenom

\`\`\`js
/**
 * UpcomingGaugesPerDenom returns scheduled gauges that have not yet occured
 * by denom
 */
const request: UpcomingGaugesPerDenomRequest;
const result = await osmosis.incentives.upcomingGaugesPerDenom(request);
\`\`\`

##### \`osmosis.incentives.rewardsEst()\` RPC

RewardsEst

\`\`\`js
/**
 * RewardsEst returns an estimate of the rewards from now until a specified
 * time in the future The querier either provides an address or a set of locks
 * for which they want to find the associated rewards
 */
const request: RewardsEstRequest;
const result = await osmosis.incentives.rewardsEst(request);
\`\`\`

##### \`osmosis.incentives.lockableDurations()\` RPC

LockableDurations

\`\`\`js
/**
 * LockableDurations returns lockable durations that are valid to distribute
 * incentives for
 */
const request: QueryLockableDurationsRequest;
const result = await osmosis.incentives.lockableDurations(request);
\`\`\`

##### \`osmosis.lockup.moduleBalance()\` RPC

ModuleBalance

\`\`\`js
/** Return full balance of the module */
const request: ModuleBalanceRequest;
const result = await osmosis.lockup.moduleBalance(request);
\`\`\`

##### \`osmosis.lockup.moduleLockedAmount()\` RPC

ModuleLockedAmount

\`\`\`js
/** Return locked balance of the module */
const request: ModuleLockedAmountRequest;
const result = await osmosis.lockup.moduleLockedAmount(request);
\`\`\`

##### \`osmosis.lockup.accountUnlockableCoins()\` RPC

AccountUnlockableCoins

\`\`\`js
/** Returns unlockable coins which are not withdrawn yet */
const request: AccountUnlockableCoinsRequest;
const result = await osmosis.lockup.accountUnlockableCoins(request);
\`\`\`

##### \`osmosis.lockup.accountUnlockingCoins()\` RPC

AccountUnlockingCoins

\`\`\`js
/** Returns unlocking coins */
const request: AccountUnlockingCoinsRequest;
const result = await osmosis.lockup.accountUnlockingCoins(request);
\`\`\`

##### \`osmosis.lockup.accountLockedCoins()\` RPC

AccountLockedCoins

\`\`\`js
/** Return a locked coins that can't be withdrawn */
const request: AccountLockedCoinsRequest;
const result = await osmosis.lockup.accountLockedCoins(request);
\`\`\`

##### \`osmosis.lockup.accountLockedPastTime()\` RPC

AccountLockedPastTime

\`\`\`js
/** Returns locked records of an account with unlock time beyond timestamp */
const request: AccountLockedPastTimeRequest;
const result = await osmosis.lockup.accountLockedPastTime(request);
\`\`\`

##### \`osmosis.lockup.accountLockedPastTimeNotUnlockingOnly()\` RPC

AccountLockedPastTimeNotUnlockingOnly

\`\`\`js
/**
 * Returns locked records of an account with unlock time beyond timestamp
 * excluding tokens started unlocking
 */
const request: AccountLockedPastTimeNotUnlockingOnlyRequest;
const result = await osmosis.lockup.accountLockedPastTimeNotUnlockingOnly(request);
\`\`\`

##### \`osmosis.lockup.accountUnlockedBeforeTime()\` RPC

AccountUnlockedBeforeTime

\`\`\`js
/** Returns unlocked records with unlock time before timestamp */
const request: AccountUnlockedBeforeTimeRequest;
const result = await osmosis.lockup.accountUnlockedBeforeTime(request);
\`\`\`

##### \`osmosis.lockup.accountLockedPastTimeDenom()\` RPC

AccountLockedPastTimeDenom

\`\`\`js
/** Returns lock records by address, timestamp, denom */
const request: AccountLockedPastTimeDenomRequest;
const result = await osmosis.lockup.accountLockedPastTimeDenom(request);
\`\`\`

##### \`osmosis.lockup.lockedDenom()\` RPC

LockedDenom

\`\`\`js
/** Returns total locked per denom with longer past given time */
const request: LockedDenomRequest;
const result = await osmosis.lockup.lockedDenom(request);
\`\`\`

##### \`osmosis.lockup.lockedByID()\` RPC

LockedByID

\`\`\`js
/** Returns lock record by id */
const request: LockedRequest;
const result = await osmosis.lockup.lockedByID(request);
\`\`\`

##### \`osmosis.lockup.syntheticLockupsByLockupID()\` RPC

SyntheticLockupsByLockupID

\`\`\`js
/** Returns synthetic lockups by native lockup id */
const request: SyntheticLockupsByLockupIDRequest;
const result = await osmosis.lockup.syntheticLockupsByLockupID(request);
\`\`\`

##### \`osmosis.lockup.accountLockedLongerDuration()\` RPC

AccountLockedLongerDuration

\`\`\`js
/** Returns account locked records with longer duration */
const request: AccountLockedLongerDurationRequest;
const result = await osmosis.lockup.accountLockedLongerDuration(request);
\`\`\`

##### \`osmosis.lockup.accountLockedDuration()\` RPC

AccountLockedDuration

\`\`\`js
/** Returns account locked records with a specific duration */
const request: AccountLockedDurationRequest;
const result = await osmosis.lockup.accountLockedDuration(request);
\`\`\`

##### \`osmosis.lockup.accountLockedLongerDurationNotUnlockingOnly()\` RPC

AccountLockedLongerDurationNotUnlockingOnly

\`\`\`js
/**
 * Returns account locked records with longer duration excluding tokens
 * started unlocking
 */
const request: AccountLockedLongerDurationNotUnlockingOnlyRequest;
const result = await osmosis.lockup.accountLockedLongerDurationNotUnlockingOnly(request);
\`\`\`

##### \`osmosis.lockup.accountLockedLongerDurationDenom()\` RPC

AccountLockedLongerDurationDenom

\`\`\`js
/** Returns account's locked records for a denom with longer duration */
const request: AccountLockedLongerDurationDenomRequest;
const result = await osmosis.lockup.accountLockedLongerDurationDenom(request);
\`\`\`

##### \`osmosis.lockup.params()\` RPC

Params

\`\`\`js
/** Params returns lockup params. */
const request: QueryParamsRequest;
const result = await osmosis.lockup.params(request);
\`\`\`

##### \`osmosis.mint.v1beta1.params()\` RPC

Params

\`\`\`js
/** Params returns the total set of minting parameters. */
const request: QueryParamsRequest;
const result = await osmosis.mint.v1beta1.params(request);
\`\`\`

##### \`osmosis.mint.v1beta1.epochProvisions()\` RPC

EpochProvisions

\`\`\`js
/** EpochProvisions returns the current minting epoch provisions value. */
const request: QueryEpochProvisionsRequest;
const result = await osmosis.mint.v1beta1.epochProvisions(request);
\`\`\`

##### \`osmosis.poolincentives.v1beta1.gaugeIds()\` RPC

GaugeIds

\`\`\`js
/** GaugeIds takes the pool id and returns the matching gauge ids and durations */
const request: QueryGaugeIdsRequest;
const result = await osmosis.poolincentives.v1beta1.gaugeIds(request);
\`\`\`

##### \`osmosis.poolincentives.v1beta1.distrInfo()\` RPC

DistrInfo

\`\`\`js
/** DistrInfo returns the pool's matching gauge ids and weights. */
const request: QueryDistrInfoRequest;
const result = await osmosis.poolincentives.v1beta1.distrInfo(request);
\`\`\`

##### \`osmosis.poolincentives.v1beta1.params()\` RPC

Params

\`\`\`js
/** Params returns pool incentives params. */
const request: QueryParamsRequest;
const result = await osmosis.poolincentives.v1beta1.params(request);
\`\`\`

##### \`osmosis.poolincentives.v1beta1.lockableDurations()\` RPC

LockableDurations

\`\`\`js
/** LockableDurations returns lock durations for pools. */
const request: QueryLockableDurationsRequest;
const result = await osmosis.poolincentives.v1beta1.lockableDurations(request);
\`\`\`

##### \`osmosis.poolincentives.v1beta1.incentivizedPools()\` RPC

IncentivizedPools

\`\`\`js
/** IncentivizedPools returns currently incentivized pools */
const request: QueryIncentivizedPoolsRequest;
const result = await osmosis.poolincentives.v1beta1.incentivizedPools(request);
\`\`\`

##### \`osmosis.poolincentives.v1beta1.externalIncentiveGauges()\` RPC

ExternalIncentiveGauges

\`\`\`js
/** ExternalIncentiveGauges returns external incentive gauges. */
const request: QueryExternalIncentiveGaugesRequest;
const result = await osmosis.poolincentives.v1beta1.externalIncentiveGauges(request);
\`\`\`

##### \`osmosis.superfluid.params()\` RPC

Params

\`\`\`js
/** Params returns the total set of superfluid parameters. */
const request: QueryParamsRequest;
const result = await osmosis.superfluid.params(request);
\`\`\`

##### \`osmosis.superfluid.assetType()\` RPC

AssetType

\`\`\`js
/**
 * Returns superfluid asset type, whether if it's a native asset or an lp
 * share.
 */
const request: AssetTypeRequest;
const result = await osmosis.superfluid.assetType(request);
\`\`\`

##### \`osmosis.superfluid.allAssets()\` RPC

AllAssets

\`\`\`js
/** Returns all registered superfluid assets. */
const request: AllAssetsRequest;
const result = await osmosis.superfluid.allAssets(request);
\`\`\`

##### \`osmosis.superfluid.assetMultiplier()\` RPC

AssetMultiplier

\`\`\`js
/** Returns the osmo equivalent multiplier used in the most recent epoch. */
const request: AssetMultiplierRequest;
const result = await osmosis.superfluid.assetMultiplier(request);
\`\`\`

##### \`osmosis.superfluid.allIntermediaryAccounts()\` RPC

AllIntermediaryAccounts

\`\`\`js
/** Returns all superfluid intermediary accounts. */
const request: AllIntermediaryAccountsRequest;
const result = await osmosis.superfluid.allIntermediaryAccounts(request);
\`\`\`

##### \`osmosis.superfluid.connectedIntermediaryAccount()\` RPC

ConnectedIntermediaryAccount

\`\`\`js
/** Returns intermediary account connected to a superfluid staked lock by id */
const request: ConnectedIntermediaryAccountRequest;
const result = await osmosis.superfluid.connectedIntermediaryAccount(request);
\`\`\`

##### \`osmosis.superfluid.totalDelegationByValidatorForDenom()\` RPC

TotalDelegationByValidatorForDenom

\`\`\`js
/** Returns the amount of delegations of specific denom for all validators */
const request: QueryTotalDelegationByValidatorForDenomRequest;
const result = await osmosis.superfluid.totalDelegationByValidatorForDenom(request);
\`\`\`

##### \`osmosis.superfluid.totalSuperfluidDelegations()\` RPC

TotalSuperfluidDelegations

\`\`\`js
/**
 * Returns the total amount of osmo superfluidly staked.
 * Response is denominated in uosmo.
 */
const request: TotalSuperfluidDelegationsRequest;
const result = await osmosis.superfluid.totalSuperfluidDelegations(request);
\`\`\`

##### \`osmosis.superfluid.superfluidDelegationAmount()\` RPC

SuperfluidDelegationAmount

\`\`\`js
/**
 * Returns the coins superfluid delegated for the delegator, validator, denom
 * triplet
 */
const request: SuperfluidDelegationAmountRequest;
const result = await osmosis.superfluid.superfluidDelegationAmount(request);
\`\`\`

##### \`osmosis.superfluid.superfluidDelegationsByDelegator()\` RPC

SuperfluidDelegationsByDelegator

\`\`\`js
/** Returns all the delegated superfluid poistions for a specific delegator. */
const request: SuperfluidDelegationsByDelegatorRequest;
const result = await osmosis.superfluid.superfluidDelegationsByDelegator(request);
\`\`\`

##### \`osmosis.superfluid.superfluidUndelegationsByDelegator()\` RPC

SuperfluidUndelegationsByDelegator

\`\`\`js
/** Returns all the undelegating superfluid poistions for a specific delegator. */
const request: SuperfluidUndelegationsByDelegatorRequest;
const result = await osmosis.superfluid.superfluidUndelegationsByDelegator(request);
\`\`\`

##### \`osmosis.superfluid.superfluidDelegationsByValidatorDenom()\` RPC

SuperfluidDelegationsByValidatorDenom

\`\`\`js
/**
 * Returns all the superfluid positions of a specific denom delegated to one
 * validator
 */
const request: SuperfluidDelegationsByValidatorDenomRequest;
const result = await osmosis.superfluid.superfluidDelegationsByValidatorDenom(request);
\`\`\`

##### \`osmosis.superfluid.estimateSuperfluidDelegatedAmountByValidatorDenom()\` RPC

EstimateSuperfluidDelegatedAmountByValidatorDenom

\`\`\`js
/**
 * Returns the amount of a specific denom delegated to a specific validator
 * This is labeled an estimate, because the way it calculates the amount can
 * lead rounding errors from the true delegated amount
 */
const request: EstimateSuperfluidDelegatedAmountByValidatorDenomRequest;
const result = await osmosis.superfluid.estimateSuperfluidDelegatedAmountByValidatorDenom(request);
\`\`\`

##### \`osmosis.superfluid.totalDelegationByDelegator()\` RPC

TotalDelegationByDelegator

\`\`\`js
/** Returns the specified delegations for a specific delegator */
const request: QueryTotalDelegationByDelegatorRequest;
const result = await osmosis.superfluid.totalDelegationByDelegator(request);
\`\`\`

##### \`osmosis.superfluid.unpoolWhitelist()\` RPC

UnpoolWhitelist

\`\`\`js
/** Returns a list of whitelisted pool ids to unpool. */
const request: QueryUnpoolWhitelistRequest;
const result = await osmosis.superfluid.unpoolWhitelist(request);
\`\`\`

##### \`osmosis.tokenfactory.v1beta1.params()\` RPC

Params

\`\`\`js
/**
 * Params defines a gRPC query method that returns the tokenfactory module's
 * parameters.
 */
const request: QueryParamsRequest;
const result = await osmosis.tokenfactory.v1beta1.params(request);
\`\`\`

##### \`osmosis.tokenfactory.v1beta1.denomAuthorityMetadata()\` RPC

DenomAuthorityMetadata

\`\`\`js
/**
 * DenomAuthorityMetadata defines a gRPC query method for fetching
 * DenomAuthorityMetadata for a particular denom.
 */
const request: QueryDenomAuthorityMetadataRequest;
const result = await osmosis.tokenfactory.v1beta1.denomAuthorityMetadata(request);
\`\`\`

##### \`osmosis.tokenfactory.v1beta1.denomsFromCreator()\` RPC

DenomsFromCreator

\`\`\`js
/**
 * DenomsFromCreator defines a gRPC query method for fetching all
 * denominations created by a specific admin/creator.
 */
const request: QueryDenomsFromCreatorRequest;
const result = await osmosis.tokenfactory.v1beta1.denomsFromCreator(request);
\`\`\`

##### \`osmosis.twap.v1beta1.params()\` RPC

Params

\`\`\`js
/** Params */
const request: ParamsRequest;
const result = await osmosis.twap.v1beta1.params(request);
\`\`\`

##### \`osmosis.twap.v1beta1.arithmeticTwap()\` RPC

ArithmeticTwap

\`\`\`js
/** ArithmeticTwap */
const request: ArithmeticTwapRequest;
const result = await osmosis.twap.v1beta1.arithmeticTwap(request);
\`\`\`

##### \`osmosis.twap.v1beta1.arithmeticTwapToNow()\` RPC

ArithmeticTwapToNow

\`\`\`js
/** ArithmeticTwapToNow */
const request: ArithmeticTwapToNowRequest;
const result = await osmosis.twap.v1beta1.arithmeticTwapToNow(request);
\`\`\`

##### \`osmosis.txfees.v1beta1.feeTokens()\` RPC

FeeTokens

\`\`\`js
/**
 * FeeTokens returns a list of all the whitelisted fee tokens and their
 * corresponding pools. It does not include the BaseDenom, which has its own
 * query endpoint
 */
const request: QueryFeeTokensRequest;
const result = await osmosis.txfees.v1beta1.feeTokens(request);
\`\`\`

##### \`osmosis.txfees.v1beta1.denomSpotPrice()\` RPC

DenomSpotPrice

\`\`\`js
/** DenomSpotPrice returns all spot prices by each registered token denom. */
const request: QueryDenomSpotPriceRequest;
const result = await osmosis.txfees.v1beta1.denomSpotPrice(request);
\`\`\`

##### \`osmosis.txfees.v1beta1.denomPoolId()\` RPC

DenomPoolId

\`\`\`js
/** Returns the poolID for a specified denom input. */
const request: QueryDenomPoolIdRequest;
const result = await osmosis.txfees.v1beta1.denomPoolId(request);
\`\`\`

##### \`osmosis.txfees.v1beta1.baseDenom()\` RPC

BaseDenom

\`\`\`js
/** Returns a list of all base denom tokens and their corresponding pools. */
const request: QueryBaseDenomRequest;
const result = await osmosis.txfees.v1beta1.baseDenom(request);
\`\`\`

"
`;

exports[`documentWithTypeUrl 1`] = `
"const {
  /** my comment */methodName
} = tendermint.yolo.db.MessageComposer.withTypeUrl;"
`;

exports[`documentWithTypeUrlReadme 1`] = `
"
#### \`tendermint.yolo.db\` messages

\`\`\`js
const {
  /** my comment */methodName
} = tendermint.yolo.db.MessageComposer.withTypeUrl;
\`\`\`
    "
`;
